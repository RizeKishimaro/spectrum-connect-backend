// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CallLog {
  id         String        @id @default(cuid())
  callerId   String
  calleeId   String?
  direction  CallDirection
  status     CallStatus
  action     String?
  agentId    String?
  agent      Agent?        @relation(fields: [agentId], references: [id])
  systemName String
  hungUpBy   String?
  duration   Int?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String?
}

model User {
  id              String        @id @default(uuid())
  password        String
  email           String
  sipUser         String        @unique
  sipPass         String
  status          AgentStatus
  createdAt       DateTime      @default(now())
  subscription    Subscription?
  roles           Role
  systemCompany   SystemCompany @relation(fields: [systemCompanyId], references: [id])
  systemCompanyId Int
}

model Subscription {
  id         String   @id @default(uuid())
  type       String
  active     Boolean  @default(true)
  userId     String   @unique
  agentCount Int
  user       User     @relation(fields: [userId], references: [id])
  startedAt  DateTime @default(now())
  expiresAt  DateTime
}

model Agent {
  id             String        @id @default(cuid())
  name           String
  profilePicture String?
  sipUname       String        @unique
  sipPassword    String
  password       String
  firstName      String
  lastName       String
  phoneNumber    String
  systemCompany  SystemCompany @relation(fields: [systemCompanyId], references: [id])
  SIPTech        SIPTech

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status           AgentStatus       @default(AVAILABLE)
  systemCompanyId  Int
  CallLog          CallLog[]
  ParkedCall       ParkedCall[]
  AgentPJSIPConfig AgentPJSIPConfig?
}

model AgentPJSIPConfig {
  id      String @id @default(cuid())
  agentId String @unique
  agent   Agent  @relation(fields: [agentId], references: [id])

  endpoint Json
  auth     Json
  aor      Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemCompany {
  id            Int          @id @default(autoincrement())
  name          String
  membersCount  String
  address       String
  country       String
  state         String
  SIPProvider   SIPProvider  @relation(fields: [sIPProviderId], references: [id])
  Agent         Agent[]
  sIPProviderId String
  ParkedCall    ParkedCall[]
  User          User[]
}

model SIPProvider {
  id            String             @id @default(cuid())
  name          String?
  description   String?
  sipTech       String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  config        SIPProviderConfig?
  SystemCompany SystemCompany[]
  RTPAddress    RTPAddress[]
  ParkedCall    ParkedCall[]
}

model SIPProviderConfig {
  id            String      @id @default(cuid())
  sipProviderId String      @unique
  endpoint      Json
  auth          Json
  aor           Json
  identify      Json
  contact       Json
  SIPProvider   SIPProvider @relation(fields: [sipProviderId], references: [id])
}

model RTPAddress {
  id            String      @id @default(cuid())
  RTPAddress    String
  Name          String
  Remark        String      @db.Text
  SIPProvider   SIPProvider @relation(fields: [sIPProviderId], references: [id])
  sIPProviderId String
}

model CallSession {
  id        String     @id @default(cuid())
  callerId  String
  type      String
  status    CallStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ParkedCall {
  id         String    @id @default(cuid())
  sipChannel String
  parkedAt   DateTime  @default(now())
  unparkedAt DateTime?
  isActive   Boolean   @default(true)

  agent   Agent?  @relation(fields: [agentId], references: [id])
  agentId String?

  sIPProvider   SIPProvider? @relation(fields: [sIPProviderId], references: [id])
  sIPProviderId String?

  DIDNumber String?

  systemCompany   SystemCompany? @relation(fields: [systemCompanyId], references: [id])
  systemCompanyId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SIPTech {
  PJSIP
  SIP
  SKINNY
  IAX
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum AgentStatus {
  AVAILABLE
  RINGING
  BUSY
  OFFLINE
}

enum CallStatus {
  WAITING
  RINGING
  CONNECTED
  HUNGUP
  FAILED
  MISSED
  TRANSFERRED
  CONNECTION_ERROR
  REQUEST_TIMEOUT
  SIP_FAILURE_CODE
  INTERNAL_ERROR
  BUSY
  REJECTED
  REDIRECTED
  UNAVAILABLE
  NOT_FOUND
  ADDRESS_INCOMPLETE
  INCOMPATIBLE_SDP
  MISSING_SDP
  AUTHENTICATION_ERROR
  BYE
  WEBRTC_ERROR
  CANCELED
  NO_ANSWER
  EXPIRES
  NO_ACK
  DIALOG_ERROR
  USER_DENIED_MEDIA_ACCESS
  BAD_MEDIA_DESCRIPTION
  RTP_TIMEOUT
}

enum Role {
  admin
  company_user
}
