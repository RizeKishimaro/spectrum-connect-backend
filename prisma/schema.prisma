// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CallLog {
  id         String        @id @default(cuid())
  callerId   String
  calleeId   String?
  direction  CallDirection
  status     CallStatus
  action     String?
  agentId    String?
  agent      Agent?        @relation(fields: [agentId], references: [id])
  systemName String
  hungUpBy   String?
  duration   Int?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  User       User?         @relation(fields: [userId], references: [id])
  userId     String?
}

model User {
  id           String        @id @default(uuid())
  password     String
  sipUser      String        @unique
  sipPass      String
  status       AgentStatus
  createdAt    DateTime      @default(now())
  subscription Subscription?
  CallLog      CallLog[]
}

model Subscription {
  id        String   @id @default(uuid())
  type      String // e.g., "basic", "premium"
  active    Boolean  @default(true)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  startedAt DateTime @default(now())
  expiresAt DateTime
  Agent     Agent[]
}

model Agent {
  id             String        @id @default(cuid())
  name           String
  profilePicture String?
  sipUname       String        @unique
  sipPassword    String
  password       String
  firstName      String
  lastName       String
  phoneNumber    String
  systemCompany  SystemCompany @relation(fields: [systemCompanyId], references: [id])
  SIPTech        SIPTech
  Subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status          AgentStatus @default(AVAILABLE)
  systemCompanyId Int
  CallLog         CallLog[]
  subscriptionId  String
}

model SystemCompany {
  id            Int         @id @default(autoincrement())
  name          String
  membersCount  String
  address       String
  country       String
  state         String
  SIPProvider   SIPProvider @relation(fields: [sIPProviderId], references: [id])
  Agent         Agent[]
  sIPProviderId String
}

model SIPProvider {
  id            String          @id @default(uuid())
  IpHost        String          @db.Inet
  IpRange       String
  SipUsername   String?
  SipPassword   String?
  SipTech       SIPTech
  AccessToken   String?
  DIDNumber     String
  CallLimit     Int             @default(50)
  EndpointName  String          @unique
  SystemCompany SystemCompany[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RTPAddress    RTPAddress[]
}

model RTPAddress {
  id            String      @id @default(cuid())
  RTPAddress    String
  Name          String
  Remark        String      @db.Text
  SIPProvider   SIPProvider @relation(fields: [sIPProviderId], references: [id])
  sIPProviderId String
}

model CallSession {
  id        String     @id @default(cuid())
  callerId  String
  type      String
  status    CallStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum SIPTech {
  PJSIP
  SIP
  SKINNY
  IAX
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum AgentStatus {
  AVAILABLE
  RINGING
  BUSY
  OFFLINE
}

enum CallStatus {
  WAITING
  RINGING
  CONNECTED
  HUNGUP
  FAILED
  MISSED
  TRANSFERRED
  CONNECTION_ERROR
  REQUEST_TIMEOUT
  SIP_FAILURE_CODE
  INTERNAL_ERROR
  BUSY
  REJECTED
  REDIRECTED
  UNAVAILABLE
  NOT_FOUND
  ADDRESS_INCOMPLETE
  INCOMPATIBLE_SDP
  MISSING_SDP
  AUTHENTICATION_ERROR
  BYE
  WEBRTC_ERROR
  CANCELED
  NO_ANSWER
  EXPIRES
  NO_ACK
  DIALOG_ERROR
  USER_DENIED_MEDIA_ACCESS
  BAD_MEDIA_DESCRIPTION
  RTP_TIMEOUT
}
